'''
Solves problem 3 of problem set 1.

Author: Jason Torchinsky
Date: September 20th, 2021
'''

import numpy as np
from scipy.integrate import simps

import sys, getopt

def main(argv):

    E = 0

    helpStr = "problem1.py -E <Number of Points>"
    try:
        opts, args = getopt.getopt(argv, "he:", ["E="])
    except getopt.GetoptError:
        print(helpStr)
        sys.exit(2)

    for opt, arg in opts:
        if opt == "-h":
            print(helpStr)
            sys.exit()
        elif opt in ("-e", "--E"):
            E = int(arg)

    # Print startup message
    print(("Starting Problem 3 with E = {:8}.\n").format(E))
            
    

    # Print true value of integral
    x_min, x_max, nx = (0, 1, 100)
    y_min, y_max, ny = (0, 2, 100)
    xx = np.linspace(x_min, x_max, nx)
    yy = np.linspace(y_min, y_max, ny)
    zz = f(xx, yy)
    truInt = simps([simps(zz_x, xx) for zz_x in zz], yy) 
    print(("'True' approximation of integral: {:6.4}.").format(truInt))

    # Obtain samples, numerical value of integral
    N = np.ceil(0.05**(-2)*(1.0/36.0))
    Xs = np.random.default_rng().uniform(0, 1, N)
    Ys = np.random.default_rng().uniform(0, 2, N)
    fXsYs = f(Xs, Ys)
    numInt = 2.0 * np.mean(fXsYs)

    print(("Numerical approxmation of integral: {:6.4}.").format(numInt))

def f(x, y):
    return np.exp(x)*np.power(y, x)

if __name__ == "__main__":
    main(sys.argv[1:])
